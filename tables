
CREATE TABLE bank.bank (
    bank_id SERIAL PRIMARY KEY,
    bank_name character varying(50) NOT NULL,
    bank_bic character(11) NOT NULL UNIQUE,
    bank_address character varying(255) NOT NULL,
    bank_postcode character varying(10) NOT NULL,
    bank_country character varying(60) NOT NULL
);

CREATE TABLE bank.branch (
    branch_sortcode character(6) PRIMARY KEY,
    branch_bankid integer NOT NULL REFERENCES bank.bank(bank_id),
    branch_name character varying(50) NOT NULL,
    branch_address character varying(255) NOT NULL,
    branch_postcode character varying(10) NOT NULL,
    branch_country character varying(60) NOT NULL
);

CREATE TABLE bank.account_type (
    type_id SERIAL PRIMARY KEY,
    type_name character varying(100) NOT NULL
);

CREATE TABLE bank.loan_type (
    loantype_id SERIAL PRIMARY KEY,
    loantype_amount integer NOT NULL,
    loantype_interest real NOT NULL,
    loantype_term integer NOT NULL
);

CREATE TABLE bank.loan(
    loan_id SERIAL PRIMARY KEY,
    loan_type INT NOT NULL REFERENCES bank.loan_type(loantype_id),
    loan_status varchar(50) NOT NULL
);

CREATE TABLE customer.customer (
    customer_id SERIAL PRIMARY KEY,
    customer_username character varying(30) NOT NULL UNIQUE,
    customer_password character varying(30) NOT NULL,
    customer_fname character varying(50) NOT NULL,
    customer_lname character varying(50) NOT NULL,
    customer_mobile character(11) NOT NULL UNIQUE,
    customer_email character varying(50) NOT NULL UNIQUE,
    customer_address character varying(255) NOT NULL,
    customer_postcode character varying(10) NOT NULL
);


CREATE TABLE customer.account (
    account_number character(8) PRIMARY KEY,
    account_sortcode character(6) NOT NULL REFERENCES bank.branch(branch_sortcode),
    account_customerid integer NOT NULL REFERENCES customer.customer(customer_id),
    account_type integer NOT NULL REFERENCES bank.account_type(type_id),
    account_loan integer REFERENCES bank.loan(loan_id),
    account_balance integer NOT NULL,
    account_name character varying(255) NOT NULL,
    account_iban character varying(34) NOT NULL,
    account_opendate date NOT NULL
);


CREATE TABLE employee.employee (
    employee_id SERIAL PRIMARY KEY,
    employee_sortcode character(6) NOT NULL REFERENCES bank.branch(branch_sortcode),
    employee_username character varying(255) NOT NULL,
    employee_password character varying(255) NOT NULL,
    employee_role character varying(50) NOT NULL,
    employee_fname character varying(50) NOT NULL,
    employee_lname character varying(50) NOT NULL,
    employee_mobile character(11) NOT NULL,
    employee_email character varying(50) NOT NULL,
    employee_address character varying(255) NOT NULL,
    employee_postcode character varying(10) NOT NULL
);



CREATE TABLE customer.payment (
    payment_id SERIAL PRIMARY KEY,
    payment_accountnum character(8) NOT NULL REFERENCES customer.account(account_number),
    payment_receiveraccnum character(8) NOT NULL,
    payment_receiversortcode character(6) NOT NULL,
    payment_receivername character varying(255) NOT NULL,
    payment_amount integer NOT NULL,
    payment_status varchar(50) NOT NULL,
    payment_date date NOT NULL
);

CREATE TABLE customer.transfer (
    transfer_id SERIAL PRIMARY KEY,
    transfer_senderaccnum character(8) NOT NULL REFERENCES customer.account(account_number),
    transfer_receiveraccnum character(8) NOT NULL REFERENCES customer.account(account_number),
    transfer_amount integer NOT NULL,
    transfer_status varchar(50) NOT NULL,
    transfer_date date NOT NULL
);


CREATE TABLE customer.transaction_pending (
    pending_transactionid SERIAL PRIMARY KEY,
    pending_transactionref character varying(255) NOT NULL,
    pending_transferid INTEGER REFERENCES customer.transfer(transfer_id),
    pending_paymentid INTEGER REFERENCES customer.payment(payment_id),
    pending_loanid INTEGER REFERENCES bank.loan(loan_id),
    pending_sensitiveflag BOOLEAN NOT NULL,
    pending_approvalflag BOOLEAN NOT NULL
);

CREATE TABLE manager.approval (
    approval_id SERIAL PRIMARY KEY,
    approval_date date NOT NULL,
    approval_transaction integer NOT NULL REFERENCES customer.transaction_pending(pending_transactionid)
);

CREATE TABLE customer.transaction (
    transaction_id SERIAL PRIMARY KEY,
    transaction_complete integer NOT NULL REFERENCES customer.transaction_pending(pending_transactionid)
);